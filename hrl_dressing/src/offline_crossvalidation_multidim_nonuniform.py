#!/usr/bin/env python

# Hidden Markov Model Implementation for Dressing
import matplotlib
import numpy as np
import matplotlib.pyplot as pp

import ghmmwrapper
import ghmm
import random

import sys
from data_organizer import Fmat_original, exp_list

class HMM_Model:
    def __init__(self, Fmat_train, Fmat_test, categories, train_per_category, test_per_category):
        self.F = ghmm.Float() # emission domain of HMM model
        self.Fmat_train = Fmat_train
        self.Fmat_test = Fmat_test
        self.categories = categories
        self.train_trials_per_category = train_per_category
        self.test_trials_per_category  = test_per_category
                                
    # Getting mean-std / mean-covariance
    def mean_cov(self, Fmat, start_Trials, end_Trials, number_states):
        j = 0

        interval = int(len(Fmat[start_Trials]) / number_states)
        mu_force = [0.0] * number_states    # mean value
        sigma = [0.0] * number_states       # covariance matrix
        while j < number_states:
            all_data = Fmat[start_Trials][j * interval : (j+1) * interval]

            for i in range(start_Trials+1, end_Trials):
                if j != number_states - 1:
                    all_data = np.vstack([all_data, Fmat[i][j * interval : (j+1) * interval]])
                else:
                    all_data = np.vstack([all_data, Fmat[i][j * interval : -1]])

            mu_force[j] = np.mean(np.array(all_data), 0).tolist()
            sigma[j] = (np.cov(np.transpose(np.array(all_data))) * 10000).flatten().tolist()
            # if the covariance matrix is close to zero
            # if np.linalg.norm(np.array(sigma[j])) <= 0.0001:
            #     sigma[j] = (np.identity(len(mu_force[j]))*1000).flatten().tolist()
            j = j+1

        return mu_force, sigma

    def calculate_A_B_pi(self, number_states, flag):
        # A - Transition Matrix
        if number_states == 3:
            A  = [[0.2, 0.5, 0.3],
                  [0.0, 0.5, 0.5],
                  [0.0, 0.0, 1.0]]
        elif number_states == 5:
            A  = [[0.2, 0.35, 0.2, 0.15, 0.1],
                  [0.0, 0.2, 0.45, 0.25, 0.1],
                  [0.0, 0.0, 0.2, 0.55, 0.25],
                  [0.0, 0.0, 0.0, 0.2, 0.8],
                  [0.0, 0.0, 0.0, 0.0, 1.0]]
        elif number_states == 10:
            A = [[0.1, 0.25, 0.15, 0.15, 0.1, 0.05, 0.05, 0.05, 0.05, 0.05],
                  [0.0, 0.1, 0.25, 0.15, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05],
                  [0.0, 0.0, 0.1, 0.25, 0.25, 0.2, 0.05, 0.05, 0.05, 0.05],
                  [0.0, 0.0, 0.0, 0.1, 0.3, 0.20, 0.20, 0.1, 0.05, 0.05],
                  [0.0, 0.0, 0.0, 0.0, 0.1, 0.30, 0.30, 0.20, 0.05, 0.05],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.1, 0.35, 0.30, 0.20, 0.05],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.2, 0.30, 0.30, 0.20],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.2, 0.50, 0.30],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.4, 0.60],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00]]
            '''
            A = [[0.8, 0.05, 0.04, 0.03, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01],
                  [0.0, 0.8, 0.05, 0.04, 0.03, 0.02, 0.02, 0.02, 0.01, 0.01],
                  [0.0, 0.0, 0.8, 0.05, 0.04, 0.03, 0.02, 0.02, 0.02, 0.02],
                  [0.0, 0.0, 0.0, 0.8, 0.05, 0.05, 0.04, 0.03, 0.02, 0.01],
                  [0.0, 0.0, 0.0, 0.0, 0.8, 0.1, 0.05, 0.03, 0.01, 0.01],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.8, 0.10, 0.05, 0.03, 0.02],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.8, 0.10, 0.05, 0.05],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.8, 0.10, 0.10],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.9, 0.10],
                  [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00]]
                  '''
        elif number_states == 15:
            # A = [[0.2, 0.25, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.12, 0.25, 0.15, 0.08, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.0, 0.08, 0.21, 0.21, 0.13, 0.07, 0.05, 0.05, 0.05, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.0, 0.0, 0.08, 0.27, 0.17, 0.16, 0.07, 0.05, 0.05, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.0, 0.0, 0.0, 0.07, 0.26, 0.26, 0.15, 0.06, 0.05, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.08, 0.29, 0.25, 0.15, 0.08, 0.05, 0.03, 0.03, 0.02, 0.02],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.08, 0.29, 0.25, 0.15, 0.08, 0.05, 0.04, 0.04, 0.02],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.08, 0.29, 0.25, 0.15, 0.10, 0.05, 0.05, 0.03],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.10, 0.30, 0.20, 0.20, 0.10, 0.05, 0.05],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.30, 0.30, 0.20, 0.05, 0.05],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.35, 0.30, 0.20, 0.05],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.20, 0.30, 0.30, 0.20],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.20, 0.50, 0.30],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.40, 0.60],
            #      [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00]]
            A = [[0.1, 0.25, 0.15, 0.15, 0.1, 0.05, 0.05, 0.05, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.1, 0.25, 0.25, 0.2, 0.1, 0.05, 0.05, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.1, 0.25, 0.25, 0.2, 0.05, 0.05, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.1, 0.3, 0.30, 0.20, 0.1, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.1, 0.30, 0.30, 0.20, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.1, 0.35, 0.30, 0.15, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.1, 0.30, 0.30, 0.10, 0.05, 0.05, 0.05, 0.03, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.1, 0.30, 0.30, 0.10, 0.05, 0.05, 0.05, 0.05],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.20, 0.15, 0.10, 0.10, 0.05],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.20, 0.15, 0.15, 0.10],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.1, 0.30, 0.30, 0.20, 0.10],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.1, 0.40, 0.30, 0.20],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.20, 0.50, 0.30],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.40, 0.60],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 1.00]]
        elif number_states == 20:
            A = [[0.1, 0.25, 0.15, 0.15, 0.1, 0.05, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.1, 0.25, 0.25, 0.2, 0.1, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.1, 0.25, 0.25, 0.2, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.1, 0.3, 0.30, 0.20, 0.09, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.1, 0.30, 0.30, 0.15, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.1, 0.35, 0.30, 0.10, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.1, 0.30, 0.20, 0.10, 0.05, 0.05, 0.05, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.1, 0.30, 0.20, 0.10, 0.05, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.20, 0.15, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.20, 0.15, 0.10, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.1, 0.30, 0.30, 0.10, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.1, 0.40, 0.30, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.20, 0.40, 0.20, 0.10, 0.04, 0.02, 0.02, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.20, 0.10, 0.05, 0.03, 0.02],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.20, 0.10, 0.05, 0.05],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.20, 0.40, 0.20, 0.10, 0.10],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.20, 0.40, 0.20, 0.20],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.30, 0.50, 0.20],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.40, 0.60],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00]]
        elif number_states == 30:
            A = [[0.1, 0.25, 0.15, 0.1, 0.05, 0.05, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.1, 0.25, 0.2, 0.15, 0.1, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.1, 0.25, 0.2, 0.15, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.1, 0.3, 0.20, 0.20, 0.09, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.1, 0.30, 0.20, 0.15, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.1, 0.35, 0.20, 0.10, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.1, 0.30, 0.10, 0.10, 0.05, 0.05, 0.05, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.1, 0.30, 0.10, 0.10, 0.05, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.15, 0.1, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.15, 0.1, 0.10, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.1, 0.30, 0.20, 0.10, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.1, 0.40, 0.20, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.20, 0.40, 0.10, 0.10, 0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.10, 0.10, 0.05, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.10, 0.10, 0.05, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.20, 0.40, 0.10, 0.10, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.20, 0.40, 0.20, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.30, 0.50, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.30, 0.60, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.10, 0.80, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.00, 0.10, 0.80, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.00, 0.10, 0.80, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.06, 0.01, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.07, 0.01, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.08, 0.01, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.09, 0.01],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.30, 0.70],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00]]
        elif number_states == 40:
            A = [[0.1, 0.25, 0.15, 0.1, 0.05, 0.05, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.1, 0.25, 0.2, 0.15, 0.1, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.1, 0.25, 0.2, 0.15, 0.05, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.1, 0.3, 0.20, 0.20, 0.09, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.1, 0.30, 0.20, 0.15, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.1, 0.35, 0.20, 0.10, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.1, 0.30, 0.10, 0.10, 0.05, 0.05, 0.05, 0.03, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.1, 0.30, 0.10, 0.10, 0.05, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.15, 0.1, 0.05, 0.05, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.1, 0.30, 0.15, 0.1, 0.10, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.1, 0.30, 0.20, 0.10, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.1, 0.40, 0.20, 0.10, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.20, 0.40, 0.10, 0.10, 0.04, 0.02, 0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.10, 0.10, 0.05, 0.03, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.20, 0.40, 0.10, 0.10, 0.05, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.20, 0.40, 0.10, 0.10, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.20, 0.40, 0.20, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.30, 0.50, 0.10, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.30, 0.60, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.10, 0.80, 0.03, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.00, 0.10, 0.80, 0.04, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.00, 0.10, 0.80, 0.05, 0.01, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.06, 0.01, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.07, 0.01, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.08, 0.01, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.09, 0.01, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.30, 0.70, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.10, 0.80, 0.10, 0.00, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.10, 0.80, 0.10, 0.00, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10, 0.00],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.80, 0.10],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.20, 0.80],
                 [0.0, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.0, 0.0, 0.0, 0.00, 0.00, 0.00, 1.00]]
        
        # B - Emission Matrix, parameters of emission distributions in pairs of (mu, sigma)
    
        B = [0.0]*number_states
        accum = [0.0] * len(self.categories)
        accum[0] = self.train_trials_per_category[0]
        for i in range(1, len(self.categories)):
            accum[i] = accum[i-1] + self.train_trials_per_category[i]

        if flag == exp_list[0]:
            mu_force, sigma = self.mean_cov(self.Fmat_train, 0, accum[0], number_states)
        elif flag == exp_list[1]:
            mu_force, sigma = self.mean_cov(self.Fmat_train, accum[0], accum[1], number_states)
        elif flag == exp_list[2]:
            mu_force, sigma = self.mean_cov(self.Fmat_train, accum[1], accum[2], number_states)
        elif flag == exp_list[3]:
            mu_force, sigma = self.mean_cov(self.Fmat_train, accum[2], accum[3], number_states)

        for num_states in range(number_states):
            B[num_states] = [mu_force[num_states],sigma[num_states]]

        # pi - initial probabilities per state
        if number_states == 3:
            pi = [1./3.] * 3
        elif number_states == 5:
            pi = [0.2] * 5
        elif number_states == 10:
            pi = [0.1] * 10
            # pi = [0.0] * 10
            # pi[0] = 1.0
        elif number_states == 15:
            pi = [1./15.] * 15
            # pi = [0.0] * 15
            # pi[0] = 1.0
        elif number_states == 20:
            pi = [1./20.] * 20
            # pi = [0.0] * 20
            # pi[0] = 1.0
        elif number_states == 30:
            pi = [1./30.] * 30
            # pi = [0.0] * 30
            # pi[0] = 1.0
        elif number_states == 40:
            pi = [1./40.] * 40
            # pi = [0.0] * 40
            # pi[0] = 1.0

            #pi = [0.5, 0.25, 0.125, 0.0625, 0.0625/6, 0.0625/6, 0.0625/6, 0.0625/6, 0.0625/6, 0.0625/6]

        print 'Matrix B'
        print B
        #raw_input("Press Enter to continue...")   
        return A, B, pi

    def create_model(self, flag, number_states):
          
        A, B, pi = self.calculate_A_B_pi(number_states, flag)

        # generate models from parameters
        #model = ghmm.HMMFromMatrices(self.F,ghmm.GaussianDistribution(self.F), A, B, pi)
        model = ghmm.HMMFromMatrices(self.F, ghmm.MultivariateGaussianDistribution(self.F), A, B, pi)

        return model

    def train(self, model, flag, accum_idx):
        input_data = []
        start = 0
        end = 0
        if flag == exp_list[0]:
            start = 0
            end = accum_idx[0]
        elif flag == exp_list[1]:
            start = accum_idx[0]
            end = accum_idx[1]
        elif flag == exp_list[2]:
            start = accum_idx[1]
            end = accum_idx[2]
        elif flag == exp_list[3]:
            start = accum_idx[2]
            end = accum_idx[3]
        for i in range(start, end):
            input_data.append(self.Fmat_train[i].flatten().tolist())

        '''
        if (flag == exp_list[0]):
            pp.figure(3)
            print len(self.Fmat_train)
            print start
            print end
            for i in range(start, end):
                #pp.plot(np.transpose(self.Fmat_train[i])[0], np.transpose(self.Fmat_train[i])[1], 'o')
                pp.plot(np.transpose(self.Fmat_train[i])[0])
            pp.show()
            # abc
        '''


        final_ts = ghmm.SequenceSet(self.F, input_data)

        # print the input data
        print final_ts

        model.baumWelch(final_ts)
        # print the optimized model
        print model
        #abc
        return model

    def test(self, model, ts_obj):
        # Find Viterbi Path
        noise_leng = 200
        noise = []
        for i in range(0, noise_leng):
            noise.append(random.random()*0.01)
        final_ts_obj = ghmm.EmissionSequence(self.F, ts_obj.flatten().tolist())
        path_obj = model.viterbi(final_ts_obj)
        return path_obj

# Converts 0.1mps data to be synced with 0.15mps data
def warp_slow_to_fast(self, data):
    interpolated_data = []
    for i in xrange(len(data)-1):
        interpolated_data.append(data[i])
        interpolated_data.append(data[i] + 0.5*(data[i+1]-data[i]))
    interpolated_data.append(data[len(data)-1])
    interpolated_data = np.array(interpolated_data)
    warped_data = []
    for i in xrange(len(interpolated_data)):
        if i%3 == 0:
            warped_data.append(interpolated_data[i])
    return np.array(warped_data)

def create_datasets(mat, fold_num, n_folds, generlizability):   # generalizaility takes 'human', 'velocity' or 'none'
    trains = [[], [],[],[]]
    tests = [[],[],[],[]]

    if generlizability == 'none':   # do n_folds across all data
        exp_num = [0.0] * len(exp_list)     # number of trials for each category
        for i in range(len(mat)):
            for j in range(len(mat[i])):
                for k in range(len(mat[i][j])):
                    exp_num[k] += len(mat[i][j][k])
        training_part = [0.0] * len(exp_list)
        for i in range(len(exp_num)):
            training_part[i] = [int(exp_num[i] / n_folds * int(fold_num-1)), int(exp_num[i] / n_folds * int(fold_num))]
        for e in range(len(exp_num)):
            accum_num = 0
            for sub in range(len(mat)):
                for vel in range(len(mat[sub])):
                    for profile in mat[sub][vel][e]:
                        if accum_num < training_part[e][0] or accum_num >= training_part[e][1]:
                            trains[e].append(profile)
                        else:
                            tests[e].append(profile)
                        accum_num += 1


    return sum([trains[0], trains[1], trains[2], trains[3]],[]), sum([tests[0], tests[1], tests[2], tests[3]],[]), [len(trains[0]), len(trains[1]), len(trains[2]), len(trains[3])], [len(tests[0]), len(tests[1]), len(tests[2]), len(tests[3])]

def run_crossvalidation(Fmat, categories, n_folds, data_percent):
    confusion_mat = [[0] * np.size(categories) for i in range(np.size(categories))]
    for fold in range(1, n_folds+1):
        training_set, testing_set, training_trials, testing_trials = create_datasets(Fmat, fold, n_folds, 'none')
        hMM = HMM_Model(training_set, testing_set, categories, training_trials, testing_trials)
        states = 15
        path = np.array([[0] * np.size(categories) for i in range(np.size(testing_set,0))])
        path_max = []
        model = []
        model_trained = []
        accum = [0.0] * np.size(categories)
        accum[0] = training_trials[0]
        for i in range(1, len(categories)):
            accum[i] = accum[i-1] + training_trials[i]
        for i in range(np.size(categories)):
            model.append(hMM.create_model(categories[i], states))
            model_trained.append(hMM.train(model[i], categories[i], accum))
            print 'trained model' , i
        for i in range(np.size(testing_set,0)):
            for j in range(np.size(categories)):
                test_data_len = len(testing_set[i]) * data_percent
                value = hMM.test(model_trained[j], testing_set[i][0:test_data_len])[1]
                # print 'confidence: ', value
                path[i][j] = value if value != -float('Inf') else -50000000
        for i in range(np.size(testing_set,0)):
            path_max.append(max(path[i]))
            #print max(path[i])
            for j in range(np.size(categories)):
                if path_max[i] == path[i][j]:
                    predicted_cat = 0
                    if i < testing_trials[0]:
                        predicted_cat = 0
                    elif i < testing_trials[0] + testing_trials[1]:
                        predicted_cat = 1
                    elif i < testing_trials[0] + testing_trials[1] + testing_trials[2]:
                        predicted_cat = 2
                    elif i < testing_trials[0] + testing_trials[1] + testing_trials[2] + testing_trials[3]:
                        predicted_cat = 3
                    confusion_mat[j][predicted_cat] = confusion_mat[j][predicted_cat] + 1
        #print path_max
    cmat = np.matrix(confusion_mat)
    return cmat

def show_confusion(cmat):
    total = float(cmat.sum())
    true = float(np.trace(cmat))
    percent_acc = "{0:.2f}".format((true/total)*100)

    # Plot Confusion Matrix
    Nlabels = np.size(categories)
    fig = pp.figure(0)
    ax = fig.add_subplot(111)
    figplot = ax.matshow(cmat, interpolation = 'nearest', origin = 'upper', extent=[0, Nlabels, 0, Nlabels])
    ax.set_title('Performance of HMM Models : Accuracy = ' + str(percent_acc))
    pp.xlabel("Targets")
    pp.ylabel("Predictions")
    ax.set_xticks([0.5,1.5,2.5,3.5])
    ax.set_xticklabels(exp_list)
    ax.set_yticks([3.5,2.5,1.5,0.5])
    ax.set_yticklabels(exp_list)
    figbar = fig.colorbar(figplot)

    i = 0    
    while (i < 4):
        j = 0
        while (j < 4):
            pp.text(j+0.5,3.5-i,cmat[i,j])
            j = j+1
        i = i+1

if __name__ == '__main__':  
    
    input_Fmat = Fmat_original
    
    categories = exp_list
    n_folds = 3

    percentages = []
    accuracies = []
    percent_div = 1
    for i in range(0, percent_div):
        result_mat = run_crossvalidation(input_Fmat, categories, n_folds, (i+1) * 1.0 / percent_div)
        percentages.append((i+1) * 1.0 / percent_div)
        total = float(result_mat.sum())
        true = float(np.trace(result_mat))
        percent_acc = (true/total)*100
        accuracies.append(percent_acc)
    show_confusion(result_mat)
    pp.figure(1)
    pp.plot(percentages, accuracies)
    pp.show()
        

    
    
   

    
    
