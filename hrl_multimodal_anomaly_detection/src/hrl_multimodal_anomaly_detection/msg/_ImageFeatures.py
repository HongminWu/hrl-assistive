"""autogenerated by genpy from hrl_multimodal_anomaly_detection/ImageFeatures.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hrl_multimodal_anomaly_detection.msg

class ImageFeatures(genpy.Message):
  _md5sum = "5250862cd4c7070a617ad19a215337bf"
  _type = "hrl_multimodal_anomaly_detection/ImageFeatures"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Circle[] circles
Rectangle[] rectangles
================================================================================
MSG: hrl_multimodal_anomaly_detection/Circle
int32 x
int32 y
int32 radius
int32 r
int32 g
int32 b
================================================================================
MSG: hrl_multimodal_anomaly_detection/Rectangle
int32 lowX
int32 lowY
int32 highX
int32 highY
int32 r
int32 g
int32 b
int32 thickness
"""
  __slots__ = ['circles','rectangles']
  _slot_types = ['hrl_multimodal_anomaly_detection/Circle[]','hrl_multimodal_anomaly_detection/Rectangle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       circles,rectangles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImageFeatures, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.circles is None:
        self.circles = []
      if self.rectangles is None:
        self.rectangles = []
    else:
      self.circles = []
      self.rectangles = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.circles)
      buff.write(_struct_I.pack(length))
      for val1 in self.circles:
        _x = val1
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.radius, _x.r, _x.g, _x.b))
      length = len(self.rectangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.rectangles:
        _x = val1
        buff.write(_struct_8i.pack(_x.lowX, _x.lowY, _x.highX, _x.highY, _x.r, _x.g, _x.b, _x.thickness))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.circles is None:
        self.circles = None
      if self.rectangles is None:
        self.rectangles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circles = []
      for i in range(0, length):
        val1 = hrl_multimodal_anomaly_detection.msg.Circle()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.radius, _x.r, _x.g, _x.b,) = _struct_6i.unpack(str[start:end])
        self.circles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rectangles = []
      for i in range(0, length):
        val1 = hrl_multimodal_anomaly_detection.msg.Rectangle()
        _x = val1
        start = end
        end += 32
        (_x.lowX, _x.lowY, _x.highX, _x.highY, _x.r, _x.g, _x.b, _x.thickness,) = _struct_8i.unpack(str[start:end])
        self.rectangles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.circles)
      buff.write(_struct_I.pack(length))
      for val1 in self.circles:
        _x = val1
        buff.write(_struct_6i.pack(_x.x, _x.y, _x.radius, _x.r, _x.g, _x.b))
      length = len(self.rectangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.rectangles:
        _x = val1
        buff.write(_struct_8i.pack(_x.lowX, _x.lowY, _x.highX, _x.highY, _x.r, _x.g, _x.b, _x.thickness))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.circles is None:
        self.circles = None
      if self.rectangles is None:
        self.rectangles = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.circles = []
      for i in range(0, length):
        val1 = hrl_multimodal_anomaly_detection.msg.Circle()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.radius, _x.r, _x.g, _x.b,) = _struct_6i.unpack(str[start:end])
        self.circles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rectangles = []
      for i in range(0, length):
        val1 = hrl_multimodal_anomaly_detection.msg.Rectangle()
        _x = val1
        start = end
        end += 32
        (_x.lowX, _x.lowY, _x.highX, _x.highY, _x.r, _x.g, _x.b, _x.thickness,) = _struct_8i.unpack(str[start:end])
        self.rectangles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
_struct_8i = struct.Struct("<8i")
