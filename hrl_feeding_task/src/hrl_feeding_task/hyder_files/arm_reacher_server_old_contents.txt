    # def heardEnter():
    #     i,o,e = select.select([sys.stdin],[],[],1)
    #     for s in i:
    #         if s == sys.stdin:
    #             input = sys.stdin.readline()
    #             return True
    #         return False

#ORIGINAL SCOOPING CODE BEFORE CONSIDERING ANY KINECT STUFF!!!

# print "MOVES1"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.2920, self.bowl_pos[1] + -0.7260, self.bowl_pos[2] + 0.2600)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) # (0.573, -0.451, -0.534, 0.428)
# timeout = 4
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # self.currentAngles = self.getJointAngles()
# # print "Current Angles:"
# # print self.currentAngles
# # self.point.positions = self.currentAngles
# # self.previousGoals.points.append(self.point)
# # print "EVERYTHING:"
# # print self.previousGoals
# # print "resized Points:"
# # print self.previousGoals.points[armReachAction.iteration]
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[armReachAction.iteration].positions[2]
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
# # armReachAction.iteration += 1
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES2"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.1080, self.bowl_pos[1] + -0.1410, self.bowl_pos[2] + 0.2550)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.690, -0.092, -0.112, 0.709)
# timeout = 4
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES3"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.0920, self.bowl_pos[1] + 0.0310, self.bowl_pos[2] + 0.0950)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  #  (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.713, 0.064, -0.229, 0.659)
# timeout = 3
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES4"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.0140, self.bowl_pos[1] +  0, self.bowl_pos[2] + 0.00900)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.700, 0.108, -0.321, 0.629)
# timeout = 3
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES5"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + 0, self.bowl_pos[1] + 0, self.bowl_pos[2] +  0) #REACHED THE ACTUAL BOWL
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.706, 0.068, -0.235, 0.664)
# timeout = 1
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES6"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + 0.0120, self.bowl_pos[1] + -0.00100, self.bowl_pos[2] +  0.0130)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.672, 0.037, -0.137, 0.727)
# timeout = 1
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES7"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.122, self.bowl_pos[1] + -0.0319, self.bowl_pos[2] + 0.300)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.699, -0.044, -0.085, 0.709)
# timeout = 1
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
#
# #---------------------------------------------------------------------------------------#
#
# print "MOVES8"
# (pos.x, pos.y, pos.z) = (self.bowl_pos[0] + -0.0210, self.bowl_pos[1] +  -0.0519, self.bowl_pos[2] +  0.410)
# (quat.x, quat.y, quat.z, quat.w) = (0.696, 0.035, -0.008, 0.717)  # (self.bowl_quat[0], self.bowl_quat[1], self.bowl_quat[2], self.bowl_quat[3]) #  (0.677, -0.058, -0.004, 0.733)
# timeout = 1
# #self.setPositionGoal(pos, quat, timeout)
# self.setOrientGoal(pos, quat, timeout)
#
# # #Code for storing current joint angles in case of playback...
# # currentAngles = self.getJointAngles()
# # np.resize(self.previousGoals.points, armReachAction.iteration+1)
# # np.resize(self.previousGoals.points[armReachAction.iteration].positions, 7)
# # self.previousGoals.points[armReachAction.iteration].positions = currentAngles
# # armReachAction.iteration += 1
# #
# #
# # print "Stored joint angles: "
# # print self.previousGoals.points[iteration].positions
# raw_input("Iteration # %d. Enter anything to continue: " % armReachAction.iteration)
