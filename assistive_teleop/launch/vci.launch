<launch>
  <include file="$(find pr2_machine)/$(env ROBOT).machine" />
  <arg name="launch_kinect" default="false" />
  <arg name="kinect_ns" default="head_mount_kinect" />
  <arg name="kinect_points" default="/$(arg kinect_ns)/qhd/points" />
  <arg name="run_ft_sensor" default="false" />
  <arg name="use_cart_ctrl" default="true" />
  <arg name="test" default="true"/>

  <arg if="$(arg test)" name="ws_port" default="9091"/>
  <arg unless="$(arg test)" name="ws_port" value="9091"/>

  <arg if="$(arg test)" name="mjpeg_port" default="8080"/>
  <arg unless="$(arg test)" name="mjpeg_port" value="8080"/>

  <arg if="$(arg test)" name="html_port" default="8008"/>
  <arg unless="$(arg test)" name="html_port" value="8000"/>

  <!-- Rosbridge, Rosapi, Roswww, and web_video_server -->
  <node name="rosbridge" pkg="rosbridge_server" type="rosbridge_websocket" output="screen">
      <param name="port" type="int" value="$(arg ws_port)" />
      <param name="binary_encoder" type="str" value="bson" />
  </node>
  <node name="rosapi" pkg="rosapi" type="rosapi_node" output="screen"/>
  <node name="roswww" pkg="roswww" type="webserver.py" output="screen" args="--port $(arg html_port) --webpath vci-www"/>
  <node pkg="mjpeg_server" type="mjpeg_server"  name="mjpeg_server" output="screen">
    <param name="port" type="int" value="$(arg mjpeg_port)"/>
  </node>
  <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher" output="screen" />

  <!-- Automatic pick-and-place actions -->
  <node name="overhead_grasp_actions" pkg="assistive_teleop" type="overhead_grasp_action" output="screen" />

  <!-- Pixel_2_3d: Returns PoseStamped with point and normal from click on image with kinect  -->
  <node name="pixel_2_3d" pkg="pixel_2_3d" type="pixel_2_3d" machine="c1" output="screen" >
      <remap from="info_topic" to="$(arg kinect_ns)/qhd/camera_info" />
      <!--<remap from="info_topic" to="$(arg kinect_ns)/rgb/camera_info" />-->
      <remap from="point_cloud" to="$(arg kinect_points)" />
      <param name="output_frame" type="string" value="/base_link" />
      <param name="normal_radius" type="double" value="0.035" />
      <param name="use_closest_pixel"  value="true"/>
  </node>

  <!--  <node name="moveit_relay" pkg="assistive_teleop" type="moveit_relay" output="screen" />-->
  <!--  Tuck arms action server -->
  <include file="$(find pr2_tuckarm)/launch/tuck_arms.launch"/>

  <!-- Filtered PointCloud for 3D Peek Feature -->
  <include file="$(find assistive_teleop)/launch/pcl_filter.launch"/>

  <!-- Gripper Sensor Action for delicate and intelligent grasping -->
  <include file="$(find pr2_gripper_sensor_action)/launch/pr2_gripper_sensor_actions.launch"/>
   
  <!-- Heartbeat relay for connection monitoring -->
  <node name="heartbeat_relay" pkg="topic_tools" type="relay" args="web_heartbeat web_heartbeat_reply" >
        <param name="unreliable" value="true"/>
        <param name="lazy" value="true"/>
  </node>

  <!-- Gripper Grasping State Monitors -->
  <node name="r_grasp_state_monitor" pkg="hrl_task_planning" type="gripper_sensor_grasp_monitor" args="right" output="screen"/>
  <node name="l_grasp_state_monitor" pkg="hrl_task_planning" type="gripper_sensor_grasp_monitor" args="left" output="screen"/>

  <!-- State Throttling -->
  <node name="head_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /head_traj_controller/state 4 /head_traj_controller/state_throttled" />

  <node name="torso_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /torso_controller/state 4 /torso_controller/state_throttled" />

  <node name="r_gripper_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /r_gripper_controller/state 16 /r_gripper_controller/state_throttled" />

  <node name="l_gripper_state_throttle" pkg="topic_tools" type="throttle" 
        args="messages /l_gripper_controller/state 16 /l_gripper_controller/state_throttled" />

  <!-- Skin drivers -->
  <include file="$(find hrl_fabric_based_tactile_sensor)/launch/pr2_tactile_sleeve_both_arms.launch"/>
  <include file="$(find hrl_fabric_based_tactile_sensor)/launch/pr2_tactile_sleeve_base.launch"/>

  <!-- Arms: Haptic MPC -->
  <include file="$(find hrl_haptic_mpc)/launch/start_pr2_mpc.launch">
    <arg name="arm" value="l"/>
    <arg name="skin" value="fabric"/>
    <arg name="namespace" value="left_arm"/>
    <arg name="rviz_teleop" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

  <include file="$(find hrl_haptic_mpc)/launch/start_pr2_mpc.launch">
    <arg name="arm" value="r"/>
    <arg name="skin" value="none"/>
    <arg name="namespace" value="right_arm"/>
    <arg name="rviz_teleop" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

  <node name="shaver_toggle_node" pkg="assistive_teleop" type="shaver" />

  <!--i <node if="$(arg run_ft_sensor)" name="throttle_wt_force_out" pkg="topic_tools" type="throttle"
        args="messages /netft_gravity_zeroing/wrench_zeroed 10 /wt_force_out_throttle" />
-->

  <!-- Image Rotation Nodes for right + left arm cameras 
  <node name="image_rotater_right" pkg="image_rotate" type="image_rotate" machine = "c1"> 
    <remap from="image" to="/r_forearm_cam/image_color"/>
    <remap from="rotated/image" to="/r_forearm_cam/image_color_rotated"/>
  </node>

  <node name="image_rotater_left" pkg="image_rotate" type="image_rotate" machine="c1"> 
    <remap from="image" to="/l_forearm_cam/image_color"/>
    <remap from="rotated/image" to="/l_forearm_cam/image_color_rotated"/>
  </node>
  -->

</launch>
