<launch>
  <include file="$(find pr2_machine)/$(env ROBOT).machine" />
  <arg name="use_kinect" default="false" />
  <arg name="kinect_ns" default="head_mount_kinect" />
  <arg name="kinect_points" default="/$(arg kinect_ns)/qhd/points" />
  <!-- kinect_camera may need to be set to .../image_raw for simulated kinect -->
  <arg name="kinect_camera" default="/$(arg kinect_ns)/qhd/image_color" />
  <arg name="run_ft_sensor" default="false" />
  <arg name="test" default="true"/>

  <arg if="$(arg test)" name="ws_port" default="9091"/>
  <arg unless="$(arg test)" name="ws_port" value="9091"/>

  <arg if="$(arg test)" name="mjpeg_port" default="8080"/>
  <arg unless="$(arg test)" name="mjpeg_port" value="8080"/>

  <arg if="$(arg test)" name="html_port" default="8008"/>
  <arg unless="$(arg test)" name="html_port" value="8000"/>

  <!-- Rosbridge, Rosapi, Roswww, and web_video_server -->
  <node name="rosbridge" pkg="rosbridge_server" type="rosbridge_websocket" output="screen">
    <param name="port" type="int" value="$(arg ws_port)" />
    <param name="binary_encoder" type="str" value="bson" />
  </node>
  <node name="rosapi" pkg="rosapi" type="rosapi_node" output="screen"/>
  <node name="roswww" pkg="roswww" type="webserver.py" output="screen" args="--port $(arg html_port) --webpath www"/>
  <node pkg="web_video_server" type="web_video_server"  name="web_video_server" output="screen"/>
  <!--<node pkg="mjpeg_server" type="mjpeg_server"  name="mjpeg_server" output="screen">
    <param name="port" type="int" value="$(arg mjpeg_port)"/>
  </node>-->
  <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher" output="screen" />

  <!-- Throttling nodes for robot state -->
  <node name="torso_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /torso_controller/state 2 /torso_controller/state_throttled" />

  <node name="head_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /head_traj_controller/state 4 /head_traj_controller/state_throttled" />

  <node name="r_gripper_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /r_gripper_controller/state 1 /r_gripper_controller/state_throttled" />

  <node name="l_gripper_state_throttle" pkg="topic_tools" type="throttle"
        args="messages /l_gripper_controller/state 1 /l_gripper_controller/state_throttled" />

  <node if="$(arg run_ft_sensor)" name="throttle_wt_force_out" pkg="topic_tools" type="throttle"
        args="messages /netft_gravity_zeroing/wrench_zeroed 10 /wt_force_out_throttle" />

  <!-- Launch Kinect (needed for pixel_2_3d -->
  <include if="$(arg use_kinect)" file="$(find openni_launch)/launch/openni.launch" >
    <arg name="camera" value="$(arg kinect_ns)" />
    <arg name="publish_tf" value="false" />
  </include>

  <!-- Pixel_2_3d: Returns PoseStamped with point and normal from click on image with kinect -->
  <node name="pixel_2_3d" pkg="pixel_2_3d" type="pixel_2_3d" machine="c1" output="screen" >
    <remap from="info_topic" to="$(arg kinect_ns)/qhd/camera_info" />
    <!--remap from="image" to="$(arg kinect_camera)" /-->
    <remap from="point_cloud" to="$(arg kinect_points)" />
    <!-- <param name="output_frame" type="string" value="/base_link" /> -->
    <param name="normal_radius" type="double" value="0.035" />
    <param name="use_closest_pixel"  value="True"/>
  </node>


  <include file="$(find pr2_gripper_sensor_action)/launch/pr2_gripper_sensor_actions.launch"/>

  <node pkg="assistive_teleop" name="l_twist_to_pose" type="twist_to_pose" output="screen">
    <remap from="twist_in" to="l_cart/web_commands" />
    <remap from="pose_out" to="/haptic_mpc/goal_pose" />
    <param name="ee_frame" value="/l_wrist_roll_link" />
  </node>


  <!-- Arms: Haptic MPC -->
  <include file="$(find hrl_haptic_mpc)/launch/start_pr2_mpc.launch">
    <arg name="arm" value="l"/>
    <arg name="skin" value="fabric"/>
    <arg name="namespace" value="left_arm"/>
    <arg name="rviz_teleop" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

  <include file="$(find hrl_haptic_mpc)/launch/start_pr2_mpc.launch">
    <arg name="arm" value="r"/>
    <arg name="skin" value="none"/>
    <arg name="namespace" value="right_arm"/>
    <arg name="rviz_teleop" value="true"/>
    <arg name="verbose" value="true"/>
  </include>

</launch>
