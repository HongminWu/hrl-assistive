<launch>
    <arg name="subject" />
    <arg name="run_tool_power" default="true" />
    <!--<arg name="shaving_board" default="/dev/shaver_arduino" />-->
    <arg name="shaving_board" default="/dev/ttyUSB3" />

    <!--        directories          -->
    <arg name="data_pkg" value="$(find rfh_data)" />
    <arg name="ar_dir" value="$(arg data_pkg)/ar_poses" />
    <arg name="arm_traj_dir" value="$(arg data_pkg)/gt_arm_trajectories" />
    <!--arg name="arm_traj_dir" value="henry_arm_trajectories" /--> 
    <arg name="ell_poses_dir" value="$(arg data_pkg)/henry_ell_poses" />
    <arg name="head_pcs_dir" value="$(arg data_pkg)/head_point_clouds" />
    <arg name="ell_regs_dir" value="$(arg data_pkg)/ellipsoid_registrations" />
    <arg name="cam_params_dir" value="$(arg data_pkg)/camera_parameters" />
    <!--arg name="ft_dir" value="$(arg data_pkg)/ft_zero_params" /-->
    <arg name="ft_dir" value="$(find hrl_ft)/params" />

    <!--         kinect params          -->
    <arg name="kinect_points" default="/head_mount_kinect/depth_registered/points" />
    <arg name="kinect_camera" default="/head_mount_kinect/rgb/image_color" />

    <!--             nodes              -->
    <include file="$(find hrl_face_adls)/launch/traj_playback_servers.launch">
        <arg name="subject" value="$(arg subject)" />
        <arg name="arm_traj_dir" value="$(arg arm_traj_dir)" />
    </include>
    <include file="$(find hrl_face_adls)/launch/pr2_ar_servo.launch" >
        <arg name="ar_dir" value="$(arg ar_dir)" />
        <arg name="cam_params_dir" value="$(arg cam_params_dir)" />
    </include>
    <include file="$(find hrl_face_adls)/launch/head_registration.launch">
        <arg name="subject" value="$(arg subject)" />
        <arg name="head_pcs_dir" value="$(arg head_pcs_dir)" />
        <arg name="kinect_points" value="$(arg kinect_points)" />
        <arg name="kinect_camera" value="$(arg kinect_camera)" />
    </include>

    <node pkg="hrl_face_adls" name="task_manager" type="task_manager.py" output="screen" />

    <param name="dangerous_force_thresh" value="10.0" />
    <param name="contact_force_thresh" value="3.0" />
    <param name="activity_force_thresh" value="3.0" />

    <!--node pkg="hrl_face_adls" name="face_adls_manager" type="face_adls_manager.py"
          output="screen" >
        <remap from="/face_adls/feedback" to="/wt_log_out" />
        <param name="dangerous_force_thresh" value="10.0" />
        <param name="contact_force_thresh" value="3.0" />
        <param name="activity_force_thresh" value="3.0" />
        <param name="timeout_time" value="30.0" />
        <param name="init_pos_tolerance" value="1000.0" />
        <param name="init_rot_tolerance" value="1000.0" />
        <param name="kinect_frame" value="head_mount_kinect_rgb_optical_frame" />
        <param name="global_poses_dir" value="$(arg ell_poses_dir)" />
        <rosparam>
            registration_files:
                shaving:
                    r: "_shaver_r_ellipsoid_registration.bag"
                    l: "_shaver_l_ellipsoid_registration.bag"
                scratching:
                    r: "_scratcher_r_ellipsoid_registration.bag"
                    l: "_scratcher_l_ellipsoid_registration.bag"
                feeding:
                    r: "_spoon_r_ellipsoid_registration.bag"
                    l: "_spoon_l_ellipsoid_registration.bag"
                wiping:
                    r: "_wiping_r_ellipsoid_registration.bag"
                    l: "_wiping_l_ellipsoid_registration.bag"
        </rosparam>
    </node-->

  <!-- Nodes for shaver power and run-stop monitor to stop shaver 
  <node if="$(arg run_tool_power)" name="tool_power_toggle" pkg="rosserial_python"
        type="serial_node.py" args="$(arg shaving_board)" output="screen"/>

  <node if="$(arg run_tool_power)" name="razor_run_stop_monitor" pkg="hrl_face_adls"
        type="razor_runstop.py" output="screen"/>

  <node pkg="hrl_ft" name="netft_gravity_zeroing" type="wrench_zeroing.py" 
          args="-l -r -z -b -f $(arg ft_dir)/ft_zero_params_gripper.yaml" 
          output="screen" />
  -->  

 <!-- Mirror pointer node points mirror at registered head location 
  <node name="mirror_pointer" pkg="hrl_face_adls" type="mirror_pointer.py" output="screen">
      <remap from="/goal_pose" to="/face_adls/r_cart_absolute"/>
  </node>
 -->

<!--    <node pkg="hrl_face_adls" name="r_cartesian_manager" type="cartesian_manager.py"
          output="screen" args="r" >
        <remap from="/face_adls/r_cart_move" to="/r_cart/web_commands" />
        <param name="init_pos_tolerance" value="100.0" />
        <param name="init_rot_tolerance" value="100.0" />
    </node>

    <node pkg="hrl_face_adls" name="l_cartesian_manager" type="cartesian_manager.py"
          output="screen" args="l" >
        <remap from="/face_adls/l_cart_move" to="/l_cart/web_commands" />
        <param name="init_pos_tolerance" value="100.0" />
        <param name="init_rot_tolerance" value="100.0" />
    </node>

    -->

    <rosparam>
        face_adls_modes:
            shaving:
                end_link: "l_gripper_shaver45_frame"
                ctrl_params: "$(find hrl_face_adls)/params/l_jt_task_shaver45.yaml"
                ctrl_name: "l_cart_jt_task_shaver"
                r_bounds:
                    lat: [0.39, 2.75]
                    lon: [-1.96, 0.39]
                    height: [0.2, 3.5]
                l_bounds:
                    lat: [0.39, 2.75]
                    lon: [-0.39, 1.96]
                    height: [0.2, 3.5]
                r_ell_poses_file: "r_shaver_ell_poses.yaml"
                l_ell_poses_file: "l_shaver_ell_poses.yaml"
            scratching:
                end_link: "l_gripper_brush45_frame"
                ctrl_params: "$(find hrl_face_adls)/params/l_jt_task_brush45.yaml"
                ctrl_name: "l_cart_jt_task_brush"
                r_bounds:
                    lat: [0, 3.14]
                    lon: [-3.1, 3.1]
                    height: [0.2, 3.5]
                l_bounds:
                    lat: [0, 3.14]
                    lon: [-3.1, 3.1]
                    height: [0.2, 3.5]
                r_ell_poses_file: "r_scratcher_ell_poses.yaml"
                l_ell_poses_file: "l_scratcher_ell_poses.yaml"
            feeding:
                end_link: "l_gripper_spoon45_frame"
                ctrl_params: "$(find hrl_face_adls)/params/l_jt_task_spoon45.yaml"
                ctrl_name: "l_cart_jt_task_spoon"
                r_bounds:
                    lat: [0.39, 2.75]
                    lon: [-1.96, 0.39]
                    height: [0.2, 3.5]
                l_bounds:
                    lat: [0.39, 2.75]
                    lon: [-0.39, 1.96]
                    height: [0.2, 3.5]
                r_ell_poses_file: "r_spoon_ell_poses.yaml"
                l_ell_poses_file: "l_rpoon_ell_poses.yaml"
            wiping:
                end_link: "l_gripper_towel_frame"
                ctrl_params: "$(find hrl_face_adls)/params/l_jt_task_towel.yaml"
                ctrl_name: "l_cart_jt_task_towel"
                r_bounds:
                    lat: [0.39, 2.75]
                    lon: [-1.96, 0.39]
                    height: [0.2, 3.5]
                l_bounds:
                    lat: [0.39, 2.75]
                    lon: [-0.39, 1.96]
                    height: [0.2, 3.5]
                r_ell_poses_file: "r_towel_ell_poses.yaml"
                l_ell_poses_file: "l_towel_ell_poses.yaml"
    </rosparam>

</launch>
